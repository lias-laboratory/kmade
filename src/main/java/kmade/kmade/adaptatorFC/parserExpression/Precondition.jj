/**
 * K-MADe : Kernel of Model for Activity Description environment
 * Copyright (C) 2006  INRIA - MErLIn Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 *
 * @author MickaÃ«l BARON (baron@ensma.fr ou baron.mickael@gmail.com)
 **/

options {
	LOOKAHEAD=2;
  	JAVA_UNICODE_ESCAPE = true;
  	ERROR_REPORTING = false;
  	STATIC = false;
	JDK_VERSION = "1.5";
}

PARSER_BEGIN(Precondition)

package kmade.kmade.adaptatorFC.parserExpression;

import kmade.kmade.KMADEConstant;
import kmade.nmda.schema.expression.AndOperator;
import kmade.nmda.schema.expression.AttributExpressExpression;
import kmade.nmda.schema.expression.BooleanConstant;
import kmade.nmda.schema.expression.DiffOperator;
import kmade.nmda.schema.expression.EqualOperator;
import kmade.nmda.schema.expression.EqualityOperator;
import kmade.nmda.schema.expression.ExpressException;
import kmade.nmda.schema.expression.GetFunction;
import kmade.nmda.schema.expression.GetUnaryFunction;
import kmade.nmda.schema.expression.GroupExpressExpression;
import kmade.nmda.schema.expression.InfEqualOperator;
import kmade.nmda.schema.expression.InfOperator;
import kmade.nmda.schema.expression.IsEmptyUnaryFunction;
import kmade.nmda.schema.expression.IsExistAtFunction;
import kmade.nmda.schema.expression.IsExistFunction;
import kmade.nmda.schema.expression.LengthFunction;
import kmade.nmda.schema.expression.LengthUnaryFunction;
import kmade.nmda.schema.expression.NodeExpression;
import kmade.nmda.schema.expression.NotUnaryFunction;
import kmade.nmda.schema.expression.NumberConstant;
import kmade.nmda.schema.expression.OrOperator;
import kmade.nmda.schema.expression.ParenthesisExpression;
import kmade.nmda.schema.expression.RelationalOperator;
import kmade.nmda.schema.expression.StringConstant;
import kmade.nmda.schema.expression.SupEqualOperator;
import kmade.nmda.schema.expression.SupOperator;
import kmade.nmda.schema.expression.UserBoolean;
import kmade.nmda.schema.expression.UserNumber;
import kmade.nmda.schema.expression.UserString;
import kmade.nmda.schema.metaobjet.NumberValue;
@SuppressWarnings({"all"})

public class Precondition {

}
PARSER_END(Precondition)

SKIP :
{
  " "
| "\r"
| "\t"
}


TOKEN :
{
	< EXIST : "isExist" >
|	< EXISTAT : "isExistAt" >
|	< EMPTY : "isEmpty" >
|	< NOMBRE : "card" >
|	< GETVALUE : "getValue" >
|	< UNKNOWN_NUMBER : "?NUM" >
|	< UNKNOWN_STRING : "?STR" >
|	< UNKNOWN_BOOLEAN : "?BOOL" >
}

TOKEN:
{
	< PARO : "(" >
|	< PARF : ")" >
|	< COMA : "," >
|	< AND : "AND" >
|	< OR : "OR" >
|	< EQUAL : "==" >
|	< NOT_EQUAL : "!=" >
|	< INF : "<" >
|	< SUP : ">" >
|	< INF_EQUAL : "<=" >
|	< SUP_EQUAL : ">=" >
|	< NOT : "not" >
|	< EOL : "\n" >
}

TOKEN:
{
  	< #DIGIT     : ["0"-"9"] >	
|	< #LETTER    : ["A"-"Z","a"-"z",".","é","è", "-", "_", "ç", "à", "@", "*","µ","£","§","%", "~", "#","{","}","|","`","²"] >
|	< BOOLEAN    : "true" | "false" >	
|	< NUMBER : ("-")* ((<DIGIT>)+ | (<DIGIT>)+ "."(<DIGIT>)*) >
|   < NOSPACE    : (<LETTER>) | (<DIGIT>) >
|   < WITHSPACE  : (<NOSPACE> | " ") >
|   < MIDLESPACE : (<NOSPACE>)+ (<WITHSPACE>)* (<NOSPACE>)+ >
|   < FINALSTR   :  <MIDLESPACE> | (<NOSPACE>)+ >
|	< IDENT : "$" <FINALSTR>  >
|	< STRING : "'" (<FINALSTR>)* "'" >
}

NodeExpression expression() : {	NodeExpression node; }{	< NUMBER > <EOF> { throw new ParseException(KMADEConstant.NO_FIRST_EXPRESSION_MESSAGE); }|   < STRING > <EOF> { throw new ParseException(KMADEConstant.NO_FIRST_EXPRESSION_MESSAGE); }
|   < NUMBER > <NUMBER> { throw new ParseException(); } 	 	|   < UNKNOWN_NUMBER > <EOF> { throw new ParseException(KMADEConstant.NO_FIRST_EXPRESSION_MESSAGE); }|   < UNKNOWN_STRING > <EOF> { throw new ParseException(KMADEConstant.NO_FIRST_EXPRESSION_MESSAGE); }    |	node = conditionalOrExpression() <EOF> { 
		if (node instanceof StringConstant || node instanceof NumberConstant 
		 		|| node instanceof UserNumber || node instanceof UserString 
				|| node instanceof LengthUnaryFunction || node instanceof LengthFunction) {
			throw new ParseException(KMADEConstant.NO_FIRST_EXPRESSION_MESSAGE);
		}
		if (node instanceof GetFunction) {
			if (!node.isBoolean()) {
				throw new ParseException(KMADEConstant.NO_FIRST_EXPRESSION_MESSAGE);
			}
		}
		return node;
	}|   <EOF> { throw new ParseException(KMADEConstant.NO_EXPRESSION_MESSAGE); }}

NodeExpression conditionalOrExpression() : {
	NodeExpression left; 
	NodeExpression right;
	OrOperator orOp;
}
{
	(left = conditionalAndExpression() ((
	< OR > { orOp = new OrOperator(left); }
  ) right = conditionalAndExpression() {
  	if (orOp != null) {
  		orOp.setRightNode(right);
  		left = orOp;
  	}
  	})* { 
		return left; 
	}) 	
}

NodeExpression conditionalAndExpression() : {
	NodeExpression left; 
	NodeExpression right;
	AndOperator andOp;
}
{
	left = equalityExpression() (( 
	< AND > { andOp = new AndOperator(left); }
  ) right = equalityExpression() {
  	if (andOp != null) {
  		andOp.setRightNode(right);
  		left = andOp;
  	}
  	})* { 
  		return left;
	} 
}

NodeExpression equalityExpression() : {
	NodeExpression left; 
	NodeExpression right;
	EqualityOperator compOp; 
}
{
	left = relationExpression() (( 
	< EQUAL > { compOp = new EqualOperator(left); }
  | < NOT_EQUAL > { compOp = new DiffOperator(left); }
  ) right = relationExpression() {
	if (compOp != null) {
		compOp.setRightNode(right);
		left = compOp;
	}
  })* { 
  		return left; 
	}
}
	
NodeExpression relationExpression() : { 
	NodeExpression left; 
	NodeExpression right;
	RelationalOperator relOp; 
}
{
	left = unaryExpressionNotPlusMinus()  (( 
	< INF > { relOp = new InfOperator(left); } 
  | < SUP > { relOp = new SupOperator(left); }
  | < INF_EQUAL > { relOp = new InfEqualOperator(left); }
  | < SUP_EQUAL > { relOp = new SupEqualOperator(left); }
  ) right = unaryExpressionNotPlusMinus() {
	if (relOp != null) {	  
		relOp.setRightNode(right);	
		left = relOp;
  	}
  })* { 
	return left;
  }
}

NodeExpression unaryExpressionNotPlusMinus() :
{ NodeExpression t;}
{
	< NOT > t = primaryExpression() { return new NotUnaryFunction(t); }
|	t = primaryExpression() { return t; } 
}

NodeExpression primaryExpression() :
{ 
	Token myToken;
	NodeExpression node;
}
{
    node = length() { return node; }|   node = isExist() { return node; }
|   node = isEmpty() { return node; }
|   node = getValue() { return node; }
|   myToken = < STRING > { 
		return new StringConstant(myToken.image.substring(1,myToken.image.length() - 1));
	}| 	myToken =  < NUMBER > { 
		return new NumberConstant(new NumberValue(myToken.image));
	}
|   myToken = < BOOLEAN > { 
		return new BooleanConstant(Boolean.parseBoolean(myToken.image)); 
	}|   < UNKNOWN_NUMBER > { return new UserNumber(); }|   < UNKNOWN_STRING > { return new UserString(); }
|   < UNKNOWN_BOOLEAN > { return new UserBoolean(); }
|	<PARO> node = conditionalOrExpression() <PARF> { return new ParenthesisExpression(node); }
}

NodeExpression getValue() : {
	Token myGroupToken;
	Token myAttrToken;
}
{
	< GETVALUE > < PARO > myGroupToken = < IDENT > < COMA > myAttrToken = < IDENT > < PARF > {
		try {
			GroupExpressExpression myGroupRef = new GroupExpressExpression(myGroupToken.image.substring(1).toLowerCase());
			AttributExpressExpression myAttrRef = new AttributExpressExpression(myAttrToken.image.substring(1).toLowerCase(), myGroupRef);
			return new GetFunction(myGroupRef,myAttrRef);
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}	
	}
}

NodeExpression getValueDouble(GroupExpressExpression ref) : {
	Token myGroupOrAttributToken;
	Token myAttrToken = null;
}
{
	< GETVALUE > < PARO > myGroupOrAttributToken = < IDENT > 
	(< COMA > myAttrToken = < IDENT >)? < PARF > {		
		GroupExpressExpression myGroupRef = null;
		AttributExpressExpression myAttrRef = null;

		try {
			if (myAttrToken == null) {
				myGroupRef = ref;
				myAttrRef = new AttributExpressExpression(myGroupOrAttributToken.image.substring(1).toLowerCase(), myGroupRef);			
				return new GetUnaryFunction(myAttrRef);
			} else {
				myGroupRef = new GroupExpressExpression(myGroupOrAttributToken.image.substring(1).toLowerCase());
				myAttrRef = new AttributExpressExpression(myAttrToken.image.substring(1).toLowerCase(), myGroupRef);			
				return new GetFunction(myGroupRef,myAttrRef);
			}
		} catch (ExpressException e) {
			throw new Error(e.toString());
		}
	}	
}

NodeExpression isExist() : 
{ 
	Token myIdentToken;
	Token function;
	GroupExpressExpression myGroupRef;
	NodeExpression node;
}
{
	( function = < EXIST > 
|	 function = < EXISTAT >)
	< PARO > myIdentToken = < IDENT > {
		try {			
			myGroupRef = new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase());
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	}
	< COMA > node = conditionalOrExpressionFunction(myGroupRef) < PARF > {
		if (function.kind == EXIST) {
			return new IsExistFunction(myGroupRef, node);
		} else {
			return new IsExistAtFunction(myGroupRef, node);
		}
	}
}

NodeExpression isEmpty() :
{ 
	Token myIdentToken; 
}
{
	< EMPTY > < PARO > myIdentToken = < IDENT > < PARF > {
		try {
			return new IsEmptyUnaryFunction(new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase()));
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	}
}

NodeExpression length() :
{
	Token myIdentToken; 
	NodeExpression node = null;
	GroupExpressExpression myGroupRef;		
}
{
	< NOMBRE > < PARO > myIdentToken = < IDENT > {
		try {
			myGroupRef = new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase());
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	}
	( < COMA > node = conditionalOrExpressionFunction(myGroupRef) )? < PARF > {
		if (node == null) {
			return new LengthUnaryFunction(myGroupRef);
		} else {
			return new LengthFunction(myGroupRef,node);
		}
	}
}

NodeExpression conditionalOrExpressionFunction(GroupExpressExpression ref) : {
	NodeExpression left; 
	NodeExpression right;
	OrOperator orOp;
}
{
	left = conditionalAndExpressionFunction(ref) ((
	< OR > { orOp = new OrOperator(left); }
  ) right = conditionalAndExpressionFunction(ref) {
  	if (orOp != null) {
  		orOp.setRightNode(right);
  		left = orOp;
  	}
  	})* { 
		return left; 
	} 
}

NodeExpression conditionalAndExpressionFunction(GroupExpressExpression ref) : {
	NodeExpression left; 
	NodeExpression right;
	AndOperator andOp;
}
{
	left = equalityExpressionFunction(ref) (( 
	< AND > { andOp = new AndOperator(left); }
  ) right = equalityExpressionFunction(ref) {
  	if (andOp != null) {
  		andOp.setRightNode(right);
  		left = andOp;
  	}
  	})* { 
  		return left;
	} 
}

NodeExpression equalityExpressionFunction(GroupExpressExpression ref) : {
	NodeExpression left; 
	NodeExpression right;
	EqualityOperator compOp; 
}
{
	left = relationExpressionFunction(ref) (( 
	< EQUAL > { compOp = new EqualOperator(left); }
  | < NOT_EQUAL > { compOp = new DiffOperator(left); }
  ) right = relationExpressionFunction(ref) {
	if (compOp != null) {
		compOp.setRightNode(right);
		left = compOp;
	}
  })* { 
  		return left; 
	}
}

NodeExpression relationExpressionFunction(GroupExpressExpression ref) : { 
	NodeExpression left; 
	NodeExpression right;
	RelationalOperator relOp; 
}
{
	left = unaryExpressionNotPlusMinusFunction(ref)  (( 
	< INF > { relOp = new InfOperator(left); } 
  | < SUP > { relOp = new SupOperator(left); }
  | < INF_EQUAL > { relOp = new InfEqualOperator(left); }
  | < SUP_EQUAL > { relOp = new SupEqualOperator(left); }
  ) right = unaryExpressionNotPlusMinusFunction(ref) {
	if (relOp != null) {	  
		relOp.setRightNode(right);	
		left = relOp;
  	}
  })* { 
	return left;
  }
}

NodeExpression unaryExpressionNotPlusMinusFunction(GroupExpressExpression ref) :
{ NodeExpression t;}
{
	< NOT > t = primaryExpressionFunction(ref) { return new NotUnaryFunction(t); }
|	t = primaryExpressionFunction(ref) { return t; } 
}

NodeExpression primaryExpressionFunction(GroupExpressExpression ref) :
{ 
	Token myToken;
	NodeExpression node;
}
{
    length() { return null; }
|   node = isExist() { return node; }
|   node = isEmpty() { return node; }
|   node = getValueDouble(ref) { return node; }
|	myToken = < IDENT > { 
		try {
			return new AttributExpressExpression(myToken.image.substring(1).toLowerCase(), ref); 		
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	}
|   myToken = < STRING > { 
		return new StringConstant(myToken.image.substring(1,myToken.image.length() - 1));
	}
| 	myToken =  < NUMBER > { 
		return new NumberConstant(new NumberValue(myToken.image));
	}
|   myToken = < BOOLEAN > { 
		return new BooleanConstant(Boolean.parseBoolean(myToken.image)); 
	}
|   < UNKNOWN_NUMBER > { return new UserNumber(); }
|   < UNKNOWN_STRING > { return new UserString(); }
|   < UNKNOWN_BOOLEAN > { return new UserBoolean(); }
|	<PARO> node = conditionalOrExpressionFunction(ref) <PARF> { return new ParenthesisExpression(node); }
}

