/**
 * K-MADe : Kernel of Model for Activity Description environment
 * Copyright (C) 2006  INRIA - MErLIn Project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 *
 * @author MickaÃ«l BARON (mickael.baron@inria.fr ou baron.mickael@gmail.com)
 **/

options {
	LOOKAHEAD=2;
  	JAVA_UNICODE_ESCAPE = true;
  	ERROR_REPORTING = false;
  	STATIC = false;
	JDK_VERSION = "1.5";
}

PARSER_BEGIN(Postcondition)

package kmade.kmade.adaptatorFC.parserExpression;

import kmade.nmda.schema.expression.NodeExpression;
import kmade.nmda.schema.expression.NotComma;
import kmade.nmda.schema.expression.GroupExpressExpression;
import kmade.nmda.schema.expression.RemoveUnaryFunction;
import kmade.nmda.schema.expression.ExpressException;
import kmade.nmda.schema.expression.SetFunction;
import kmade.nmda.schema.expression.SetUnaryFunction;
import kmade.nmda.schema.expression.AssignmentOperator;
import kmade.nmda.schema.expression.Assignment;
import kmade.nmda.schema.expression.PlusAssignment;
import kmade.nmda.schema.expression.MinusAssignment;
import kmade.nmda.schema.expression.AttributExpressExpression;
import kmade.nmda.schema.expression.StringConstant;
import kmade.nmda.schema.expression.IntegerConstant;
import kmade.nmda.schema.expression.BooleanConstant;
import kmade.nmda.schema.expression.UserBoolean;
import kmade.nmda.schema.expression.UserString;
import kmade.nmda.schema.expression.UserInteger;
import kmade.nmda.schema.expression.CreateFunction;
import kmade.nmda.schema.expression.ReplaceFunction;
import kmade.nmda.schema.expression.AddUnaryFunction;
import kmade.nmda.schema.expression.VoidConstant;
import kmade.nmda.schema.expression.GetFunction;
import kmade.nmda.schema.expression.PlusComputing;
import kmade.nmda.schema.expression.MinusComputing;
import kmade.nmda.schema.expression.ParenthesisExpression;
import kmade.nmda.schema.expression.GetUnaryFunction;
import kmade.kmade.KMADEConstant;

@SuppressWarnings({"all"})
public class Postcondition {

  public ParseException generateParseException() {      Token errortok = token.next;      int line = errortok.beginLine, column = errortok.beginColumn;      String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;      return new ParseException(KMADEConstant.COLUMN_MESSAGE + " " + column + ", " + KMADEConstant.ENCOUNTERED_TOKEN_MESSAGE + " \"" + mess + " \"");  }
}

PARSER_END(Postcondition)

SKIP :
{
  " "
| "\r"
| "\t"
}


TOKEN :
{
	< REMOVE : "remove" >
|	< SET : "set" >
|	< ADD : "add" >
|   < CREATE : "create" >
|   < REPLACE : "replace" >
|   < GETVALUE : "getValue" >
|   < UNKNOWN_INT : "?INT" >
|   < UNKNOWN_STRING : "?STR" >
|   < UNKNOWN_BOOLEAN : "?BOOL" >
|   < VOID_TYPE : "void" >
}

TOKEN:
{
	< PARO : "(" >
|	< PARF : ")" >
|	< COMA : "," >
|	< SEQUENCE : ";" >
| 	< ASSIGNMENT : ":=" >
|   < PLUS : "+" >
|   < MINUS : "-" >
|   < PLUS_ASSIGNMENT : "+=" >
|   < MINUS_ASSIGNMENT : "-=" >
|   < EOL : "\n" >
}

TOKEN:
{
  	< #DIGIT : ["0"-"9"] >	
|	< #LETTER : ["A"-"Z","a"-"z"] >
|   < BOOLEAN : "true" | "false" >	
|   < INTEGER : (<DIGIT>)+ >
| 	< IDENT : "$" <LETTER> (<LETTER> | <DIGIT>)* >
|   < STRING : "'" <LETTER> (<LETTER> | <DIGIT>)* "'" >
}

NodeExpression expression() : {
	NodeExpression node;
} {
	node = sequentialExpression() <EOF> { return node; }	
|   < VOID_TYPE > <EOF > { return new VoidConstant(); }
|	<EOF> { throw new ParseException(KMADEConstant.NO_EXPRESSION_MESSAGE); }
}

NodeExpression sequentialExpression() : {
	NodeExpression left;
	NodeExpression right;
	NotComma notComma;
} {
	left = primaryExpression() ( <SEQUENCE> { notComma = new NotComma(left); } 
	right = primaryExpression() {
	  	if (notComma != null) {
  			notComma.setRightNode(right);
  			left = notComma;
	  	}
	})* {
		return left;
	}
}

NodeExpression primaryExpression() : {
	NodeExpression node;
} {
	node = remove() { return node; }
|	node = set() { return node; }
|	node = add() { return node; }
|	node = replace() { return node; }
|   node = create() { return node; }
}

NodeExpression remove() : {
	Token myIdentToken;
	GroupExpressExpression myGroupRef;
	NodeExpression node;
} {
	< REMOVE > < PARO > myIdentToken = < IDENT > < PARF > {
		try {
			return new RemoveUnaryFunction(new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase()));
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	}
}

NodeExpression set() : {
	AssignmentOperator nodeAssignment;
	NodeExpression setFunction;
} {
	< SET > < PARO > ( 
	nodeAssignment = withGroup() {
		setFunction = new SetFunction(((AttributExpressExpression)nodeAssignment.getLeftNode()).getGroupExpressExpression(), nodeAssignment);
	}
| 	nodeAssignment = onlyAssignment(null) {
		setFunction = new SetUnaryFunction(nodeAssignment); // null Group from Attribut
	}) 
  	< PARF > {
  		return setFunction;
  	}
}

AssignmentOperator withGroup() : {
	Token myIdentToken;
	AssignmentOperator node;
	GroupExpressExpression myExpression;
} {
	myIdentToken = < IDENT > {
		try {
			myExpression = new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase());		
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	} < COMA > node = onlyAssignment(myExpression) {
		return node;
	}
}

NodeExpression add() : {
	Token myIdentToken;
} {
	< ADD > < PARO > myIdentToken = < IDENT > < PARF > {
		try {
			return new AddUnaryFunction(new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase()));
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}		
	}	
}

NodeExpression create() : {
	Token myIdentToken;
	Token myNewConcret;
	NodeExpression refNode;
	GroupExpressExpression myExpression;
} {
	< CREATE > < PARO > myIdentToken = < IDENT > {
		try {
			myExpression = new GroupExpressExpression(myIdentToken.image.substring(1).toLowerCase());		
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}
	} < COMA > refNode = sumAssignment(myExpression) < PARF > {
		return new CreateFunction(myExpression, refNode);
	}
}

NodeExpression replace() : {
	Token myFirstIdentToken;
	Token mySecondIdentToken;
} {
	< REPLACE > < PARO > myFirstIdentToken = < IDENT > < COMA > mySecondIdentToken = < IDENT > < PARF > {
		try {
			return new ReplaceFunction(new GroupExpressExpression(myFirstIdentToken.image.substring(1).toLowerCase()),
				new GroupExpressExpression(mySecondIdentToken.image.substring(1).toLowerCase()));
		} catch (ExpressException e) {
			throw new Error(e.toString());			
		}		
	}
}

AssignmentOperator onlyAssignment(GroupExpressExpression ref) : {
	Token myIdentToken;
	AttributExpressExpression myIdentNode;
	AssignmentOperator refAOp;
	NodeExpression myExpression;
} {
	myIdentToken = < IDENT > {
		if (ref == null) {			
			myIdentNode = new AttributExpressExpression(myIdentToken.image.substring(1).toLowerCase()); 				
		} else {
			try {
				myIdentNode = new AttributExpressExpression(myIdentToken.image.substring(1).toLowerCase(),ref); 				
			} catch (ExpressException e) {
				throw new Error(e.toString());			
			}
		}
	}(
		< ASSIGNMENT > { refAOp = new Assignment(myIdentNode); }
	|   < PLUS_ASSIGNMENT > { refAOp = new PlusAssignment(myIdentNode); }
	|   < MINUS_ASSIGNMENT > { refAOp = new MinusAssignment(myIdentNode); }
	) ( myExpression = sumAssignment(ref) ) {
		refAOp.setRightNode(myExpression);
		return refAOp;
	}
}

NodeExpression sumAssignment(GroupExpressExpression ref) : {
	Token operator;
	NodeExpression left; 
	NodeExpression right;
} {
	left = primaryAssignment(ref) ( 
		(operator = < PLUS > | operator = < MINUS > ) right = primaryAssignment(ref) {
			if (operator.kind == PLUS) {
				left = new PlusComputing(left,right);
			} else {
				left = new MinusComputing(left,right);
			}
		}
	)* {
		return left;
	}
}

NodeExpression primaryAssignment(GroupExpressExpression ref) : {
	NodeExpression node;
	Token myToken;
} {
	node = getValueDouble(ref) { return node; }
|   myToken = < STRING > { 
		return new StringConstant(myToken.image.substring(1,myToken.image.length() - 1));
	}
| 	myToken =  < INTEGER > { 
		return new IntegerConstant(Integer.parseInt(myToken.image));
	}
|   myToken = < BOOLEAN > { 
		return new BooleanConstant(Boolean.parseBoolean(myToken.image)); 
	}	
|	< UNKNOWN_INT > { return new UserInteger(); }
|   < UNKNOWN_STRING > { return new UserString(); }
|   < UNKNOWN_BOOLEAN > { return new UserBoolean(); }
|	<PARO> node = sumAssignment(ref) <PARF> { return new ParenthesisExpression(node); }
}

NodeExpression getValueDouble(GroupExpressExpression ref) : {
	Token myGroupOrAttributToken;
	Token myAttrToken = null;
}
{
	< GETVALUE > < PARO > myGroupOrAttributToken = < IDENT > 
	(< COMA > myAttrToken = < IDENT >)? < PARF > {		
		GroupExpressExpression myGroupRef = null;
		AttributExpressExpression myAttrRef = null;

		try {
			if (myAttrToken == null) {
				myGroupRef = ref;
				myAttrRef = new AttributExpressExpression(myGroupOrAttributToken.image.substring(1).toLowerCase(), myGroupRef);			
				if (myGroupRef == null) {
					return new GetUnaryFunction(myAttrRef);
				} else {
					return new GetFunction(myGroupRef,myAttrRef);
				}
			} else {
				myGroupRef = new GroupExpressExpression(myGroupOrAttributToken.image.substring(1).toLowerCase());
				myAttrRef = new AttributExpressExpression(myAttrToken.image.substring(1).toLowerCase(), myGroupRef);			
				return new GetFunction(myGroupRef,myAttrRef);
			}
		} catch (ExpressException e) {
			throw new Error(e.toString());
		}
	}	
}